#! /bin/bash
# GoApp init script - Tass Skoudros.

### BEGIN INIT INFO
# Provides:       goapp
# Required-Start: $network
# Required-Stop:
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: goapp
### END INIT INFO


USER="<%= @user %>" # User we wil run Go as
GOROOT="/usr/local/go"
GOPATH="/usr/local/go/bin/go"
GO_CMD="go run goapp.go"

WORKDIR="<%= @workdir %>"
SHAREDDIR="<%=@shareddir %>"
NAME="<%= @app %>" # app name for go 

###### Start script ########################################################

recursiveKill() { # Recursively kill a process and all subprocesses
    CPIDS=$(pgrep -P $1);
    for PID in $CPIDS
    do
        recursiveKill $PID
    done
    sleep 3 && kill -9 $1 2>/dev/null & # hard kill after 3 seconds
    kill $1 2>/dev/null # try soft kill first
}

case "$1" in
      start)
        echo "Starting $NAME ..."
        if [ -f "$SHAREDDIR/$NAME.pid" ]
        then
            echo "Already running according to $SHAREDDIR/$NAME.pid"
            exit 1
        fi
       
        export GOROOT="$GOROOT"
        export GOPATH="$GOPATH"
        export PATH="${PATH}:${GOROOT}/bin:${GOPATH}/bin"
        /bin/su -m -l "$USER" -c "cd $WORKDIR;$GO_CMD" > "$SHAREDDIR/$NAME.log" 2>&1 &
        PID=$!
        echo $PID > "$SHAREDDIR/$NAME.pid"
        echo "Started with pid $PID - Logging to $SHAREDDIR/$NAME.log" && exit 0
        ;;
      stop)
        echo "Stopping $NAME ..."
        if [ ! -f "$SHAREDDIR/$NAME.pid" ]
        then
            echo "Already stopped!"
            exit 1
        fi
        PID=`cat "$SHAREDDIR/$NAME.pid"`
        recursiveKill $PID
        rm -f "$SHAREDDIR/$NAME.pid"
        echo "stopped $NAME" && exit 0
        ;;
      restart)
        $0 stop
        sleep 1
        $0 start
        ;;
      status)
        if [ -f "$SHAREDDIR/$NAME.pid" ]
        then
            PID=`cat "$SHAREDDIR/$NAME.pid"`
            if [ "$(/bin/ps --no-headers -p $PID)" ]
            then
                echo "$NAME is running (pid : $PID)" && exit 0
            else
                echo "Pid $PID found in $SHAREDDIR/$NAME.pid, but not running." && exit 1
            fi
        else
            echo "$NAME is NOT running" && exit 1
        fi
    ;;
      *)
      echo "Usage: /etc/init.d/$NAME {start|stop|restart|status}" && exit 1
      ;;
esac

exit 0
